import 'dart:io';

// Local imports
import '../config/configuration.dart';
import '../models/file_entry.dart';
import '../models/project_context.dart';
import '../utils/app_info.dart';
import 'output_writer.dart';

/// An implementation of [OutputWriter] that writes the project context
/// to a single text file.
///
/// Uses BEGIN/END markers, including the project version if available,
/// to delineate file content. Includes project metadata in the header.
class TextOutputWriter implements OutputWriter {
  @override
  Future<void> write(
      ProjectContext projectContext, Configuration config) async {
    final String outputPath = config.outputPath;
    final List<FileEntry> files = projectContext.files;

    if (config.verbose) {
      print(
          'Starting to write ${files.length} processed files to: $outputPath');
      print('Project Context: $projectContext');
    }

    final buffer = StringBuffer();

    // 1. Write Header
    _writeHeader(buffer, projectContext, config);

    // 2. Write File Entries
    if (files.isEmpty) {
      if (config.verbose) {
        print('No files were processed to write.');
      }
      buffer.writeln(
          '<!-- No files matched the specified criteria or processing resulted in empty list. -->');
      buffer.writeln();
    } else {
      for (final file in files) {
        _writeFileEntry(buffer, file, projectContext, config);
      }
    }

    // 3. Write Footer
    _writeFooter(buffer);

    // 4. Write buffer to the actual file
    try {
      final outputFile = File(outputPath);
      // Ensure the directory exists before writing
      if (!await outputFile.parent.exists()) {
        await outputFile.parent.create(recursive: true);
        if (config.verbose) {
          print('Created directory: ${outputFile.parent.path}');
        }
      }
      await outputFile.writeAsString(buffer.toString());
      if (config.verbose) {
        print('Successfully wrote output to: $outputPath');
      }
    } on FileSystemException catch (e) {
      stderr.writeln('Error writing output file "$outputPath": $e');
      // Re-throwing allows the main application loop to catch and handle it
      rethrow;
    }
  }

  /// Writes the standard header to the buffer using project context and config.
  ///
  /// Includes project name, version (if available), generation time, and settings.
  void _writeHeader(
      StringBuffer buffer, ProjectContext context, Configuration config) {
    // Use package name and version if available from context
    String title = 'Project Documentation';
    if (context.packageName != null && context.packageName!.isNotEmpty) {
      title += ': ${context.packageName}';
      // Add version only if it's present and not empty
      if (context.packageVersion != null &&
          context.packageVersion!.isNotEmpty) {
        title += ' v${context.packageVersion}';
      }
    }
    buffer.writeln('# $title');
    buffer.writeln();
    // Use extraction time from context
    buffer.writeln(
        'Generated by llmifier on: ${context.extractionTime.toIso8601String()}');
    buffer.writeln('Extraction Mode: ${config.mode.name}');
    buffer.writeln('Project Type: ${context.type.name}');
    buffer.writeln();
    buffer.writeln('---');
    buffer.writeln();
  }

  /// Writes a single file entry, including BEGIN/END markers with version info,
  /// to the buffer.
  ///
  /// - [buffer]: The [StringBuffer] to write to.
  /// - [file]: The [FileEntry] containing the relative path and content.
  /// - [context]: The [ProjectContext] providing the package version.
  /// - [config]: The [Configuration] for accessing settings like verbose mode.
  void _writeFileEntry(StringBuffer buffer, FileEntry file,
      ProjectContext context, Configuration config) {
    if (config.verbose) {
      print('  Writing processed file: ${file.relativePath}');
    }

    // Prepare the version marker string, e.g., "[v1.2.3] " or empty string
    String versionMarker = "";
    if (context.packageVersion != null && context.packageVersion!.isNotEmpty) {
      // Format as specified: [vX.Y.Z] followed by a space
      versionMarker = "[v${context.packageVersion}] ";
    }

    // Write the BEGIN marker including the version marker
    buffer.writeln('<!-- BEGIN FILE: $versionMarker${file.relativePath} -->');
    // Write the actual file content
    buffer.writeln(file.content);
    // Write the END marker including the version marker
    buffer.writeln('<!-- END FILE: $versionMarker${file.relativePath} -->');
    // Add a blank line for better separation between file entries
    buffer.writeln();
  }

  /// Writes the standard footer to the buffer using [AppInfo].
  void _writeFooter(StringBuffer buffer) {
    buffer.writeln('---');
    // Include app version and build date
    buffer.writeln('Generated with llmifier v${AppInfo.version}');
    // Include author and optionally repository/package URLs
    buffer.writeln('Created by ${AppInfo.author}');
    // Uncomment the following line to include URLs in the footer:
    // buffer.writeln('Repository: ${AppInfo.repositoryUrl} | Package: ${AppInfo.packageUrl}');
  }
}
